"""

    This file is a part of the Scratch to C
    project and distributed under the MIT license.

    Copyright Â© Kadir Aksoy
    https://github.com/kadir014/scratch2c

"""

from common import Block, Primitive, PrimitiveType, Target


FILE_DOC = \
"""
/*

  This file was generated by the Scratch2C transpiler.

  +----------------------------------------+
  | Please do not manually edit this file  |
  | as it was generated automatically!     |
  +----------------------------------------+

  Scratch2C Project
  Github: https://github.com/kadir014/scratch2c

  Generated on: February 18, 2024 at 10:00 AM

  For support or issues, please use the issue tracker:
    https://github.com/kadir014/scratch2c/issues
  
*/
""".strip()


def gen(block: Block | None) -> str:
    if block is None:
        return ""
    
    if block.opcode == "control_if":
        cond = gen(block.inputs["CONDITION"])
        return f"if ({cond}) {{{gen(block.inputs['SUBSTACK'])}}}"
    
    elif block.opcode == "argument_reporter_boolean":
        return block.fields["VALUE"][0]
    
    elif block.opcode == "data_setvariableto":
        return "SetVariable"


def gen_procedure(proc: Block) -> str:
    prototype = proc.inputs["custom_block"]

    stack = gen(proc.next)

    proc_name = "SomeCustomBlock"
    proc_args = ""
    signature = f"static inline void SC_FASTCALL {proc_name}({proc_args})"

    return f"""
{signature} {{
    {stack}
}}
"""



def gen_script(block: Block | Primitive, indent: int = 0) -> str:
    if isinstance(block, Primitive):
        if block.type == PrimitiveType.STRING:
            return f"\"{block.value}\""
        
        else:
            return f"{block.value}"
        
    else:
        if block.opcode == "event_whenflagclicked":
            return f"""
{' '*indent}void flag_clicked() {{
{' '*indent}{gen_script(block.next, indent+4)}
{' '*indent}}}
"""
        
        elif block.opcode == "data_setvariableto":
            return f"{' '*indent}{block.fields['VARIABLE'][0]} = {gen_script(block.inputs['VALUE'])};"
        
        elif block.opcode == "control_repeat":
            return f"""
{' '*indent}SC_REPEAT({gen_script(block.inputs['TIMES'])}) {{
{' '*indent}{gen_script(block.inputs['SUBSTACK'], indent+4)}
{' '*indent}}}
"""
        elif block.opcode == "procedures_call":
            args = []
            for input_ in block.inputs:
                args.append(gen_script(block.inputs[input_]))

            return f"{' '*indent}{block.procedure}({', '.join(args)});"
        
        elif block.opcode == "motion_glidesecstoxy":
            return f"{' '*indent}scSprite_glide();"


def generate_code(targets: list[Target]) -> str:
    code = ""

    code += FILE_DOC
    
    code += """
    
#include "scratch/scratch.h"


/* Global project configuration */

scProject project;
scEngine *engine;


/* Global (stage) variables */

"""

    stage = [t for t in targets if t.is_stage][0]

    for var in stage.variables:
        code += f"scVariable {var.name};"

    for proc in targets[1].procedures:
        code += gen_procedure(proc)

    for script in targets[1].scripts:
        code += gen_script(script)

    return code