"""

    This file is a part of the Scratch to C
    project and distributed under the MIT license.

    Copyright Â© Kadir Aksoy
    https://github.com/kadir014/scratch2c

"""

from common import Target
from syntaxtree import *


FILE_DOC = \
"""
/*

  This file was generated by the Scratch2C transpiler.

  +----------------------------------------+
  | Please do not manually edit this file  |
  | as it was generated automatically!     |
  +----------------------------------------+

  Scratch2C Project
  Github: https://github.com/kadir014/scratch2c

  Generated on: February 18, 2024 at 10:00 AM

  For support or issues, please use the issue tracker:
    https://github.com/kadir014/scratch2c/issues
  
*/
""".strip()

ADD = 0
SUB = 1
MUL = 2
DIV = 3
MOD = 4
EQ  = 5
LT  = 6
GT  = 7
AND = 8
OR  = 9


OP_MAP = {
    BinOpType.ADD: "+",
    BinOpType.SUB: "-",
    BinOpType.MUL: "*",
    BinOpType.DIV: "/",
    BinOpType.MOD: "%", # TODO: fmod
    BinOpType.EQ: "==",
    BinOpType.LT: "<",
    BinOpType.GT: ">",
    BinOpType.AND: "&&",
    BinOpType.OR: "||",
}
        

def generate_from_node(node: Node) -> str:
    if isinstance(node, Literal):
        if node.type == LiteralType.NUMBER:
            return f"{node.value}"
        
        else:
            return node.value
        
    elif isinstance(node, Variable):
        return f"g_{node.name}.value_real"

    elif isinstance(node, Assignment):
        # get if variable is global from variable table
        return f"g_{node.variable.name}.value_real = ({generate_from_node(node.expression)});\n"
    
    elif isinstance(node, Repeat):
        inner_code = []
        for inner_node in node.body:
            inner_code.append(generate_from_node(inner_node))

        code = f"SC_REPEAT((sc_uint64)({generate_from_node(node.times)})) {{\n"
        for stmt in inner_code:
            code += f"    {stmt}"
        code += "\n}"
        return code

    elif isinstance(node, BinOp):
        return f"{generate_from_node(node.left)} {OP_MAP[node.type]} {generate_from_node(node.right)}"
    
    elif isinstance(node, FunctionCall):
        args = []
        for arg in node.arguments:
            args.append(generate_from_node(arg))
        return f"{node.function}({', '.join(args)});\n"

def generate_code(targets: list[Target]) -> str:
    code = ""

    code += FILE_DOC
    
    code += """
    
#include "scratch/scratch.h"


/* Global project configuration */

scProject project;
scEngine *engine;


/* Global (stage) variables */

"""

    stage = [t for t in targets if t.is_stage][0]

    for var in stage.variables:
        code += f"scVariable g_{var.name};"

    code += "\n"

    #for proc in targets[1].procedures:
    #    code += gen_procedure(proc)

    for script in targets[1].scripts:
        if script.opcode == "event_whenflagclicked":
            ast = generate_ast(script.next)

            inner_code = []
            for node in ast:
                inner_code.append(generate_from_node(node))

            flag_code = f"static void SC_FASTCALL target{id(targets[1])}_flag_clicked(void) {{\n"
            for stmt in inner_code:
                flag_code += f"    {stmt}"
            flag_code += "\n}"

            code += flag_code

    targets_code = ""

    for i, target in enumerate(targets):
        targets_code += f"""
scSprite target{i} = {{
    .is_stage={int(target.is_stage)}
    .x=0.0,
    .y=0.0,
    .angle=0.0,
    .visible=true,
    .draggable=true,
    .current_costume = 0
}};
target0.max_costumes = 1;
target0.costumes[0] = (scCostume){{
    .filename="asset.png",
    .texture=NULL
}};
"""

    code += f"""
int main(int argc, char **argv) {{
    project = scProject_default;
    engine = scEngine_new(project);

    {targets_code}

    bool is_running = true;

    double clock_frequency = (double)SDL_GetPerformanceFrequency();
    double clock_start = (double)SDL_GetPerformanceCounter() / clock_frequency;

    int mouse_x = 0;
    int mouse_y = 0;
    bool mouse_pressed = false;

    while (is_running) {{
        double clock_timer = (double)SDL_GetPerformanceCounter() - clock_start;

        sc_uint32 mouse_state = SDL_GetMouseState(&mouse_x, &mouse_y);
        mouse_pressed = mouse_state & SDL_BUTTON(1) | 
                        mouse_state & SDL_BUTTON(2) | 
                        mouse_state & SDL_BUTTON(3);

        SDL_Event event;
        while (SDL_PollEvent(&event) != 0) {{
            if (event.type == SDL_QUIT)
                is_running = false;
        }}

        SDL_SetRenderDrawColor(engine->renderer, 255, 255, 255, 255);
        SDL_RenderClear(engine->renderer);

        printf("days since 2000: %.9f\n", sc_days_since_2000());

        SDL_RenderPresent(engine->renderer);
    }}

    scEngine_free(engine);
    
    return EXIT_SUCCESS;
}}
"""

    return code